@page "/authors/"
@inject IAuthorService authorService;
@inject IJSRuntime JsRuntime

<h3>Index</h3>



@if (!response.Success)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
else
{
    @if (authors == null)
    {
        <div class="alert alert-info">
            <h4>Loding data...</h4>
        </div>
    }
    else
    {
        <a class="btn btn-primary" href="/authors/create"><span class="oi oi-plus" aria-hidden="true"></span>Create</a>
        <br />
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>First name</th>
                    <th>Last name</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var author in authors)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.LastName </td>
                        <td>
                            <a class="btn btn-primary" href="/authors/details/@author.Id"><span class="bi bi-ticket-detailed" aria-hidden="true"></span>Details</a>
                            <a class="btn btn-warning" href="/authors/update/@author.Id"><span class="oi oi-person" aria-hidden="true"></span>Edit</a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(@author.Id))> <span class="oi oi-delete" aria-hidden="true"></span> Delete </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
@code {
    private List<AuthorReadOnlyDto> authors;
    private Response<List<AuthorReadOnlyDto>> response = new Response<List<AuthorReadOnlyDto>> { Success = true };

    protected override async Task OnInitializedAsync()
    {
        response = await authorService.GetAuthors();

        if (response.Success)
        {

            authors = response.Data;
        }
    }

    private async Task Delete(int authorId)
    {
        var author = authors.First(q => q.Id == authorId);
        var confirm = await JsRuntime.InvokeAsync<bool>("confirm", $"Are You Sure You Want To Delete {author.FirstName} {author.LastName}?");
        if (confirm)
        {
            var response = await authorService.Delete(authorId);
            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }

}
