@page "/books/update/{id:int}"
@inject IBookService bookService
@inject IAuthorService authorService
@inject NavigationManager navManager

<h3>Update book data:</h3>
<div>

<EditForm Model="Book" OnValidSubmit="UpdateBookHandle">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="input-group-text">
        <lable>Book title: </lable>
        <InputText @bind-Value="Book.Title" class="form-control" id="title"></InputText>
    </div>
    <br />
    <div class="input-group-text">
        <lable>ISBN: </lable>
        <InputText @bind-Value="Book.Isbn" class="form-control" id="isbn"></InputText>
    </div>
    <br />
    <div class="input-group-text">
        <lable>Price: </lable>
        <InputNumber @bind-Value="Book.Price" class="form-control" id="price"></InputNumber>
    </div>
    <br />
    <div class="input-group-text">
        <lable>Year: </lable>
        <InputNumber @bind-Value="Book.Year" class="form-control" id="price"></InputNumber>
    </div>
    <br />
    <div class="input-group-text">
        <lable>Summary: </lable>
        <InputTextArea @bind-Value="Book.Summary" class="form-control" id="summary"></InputTextArea>
    </div>
    <br />
    <div class="input-group-text">
        <lable>Author: </lable>
        <InputSelect @bind-Value="Book.AuthorId" class="form-control" id="author">
            <option value="">--Select Author--</option>
            @foreach (var author in authors)
            {
                <option value="@author.Id">@author.FirstName @author.LastName</option>
            }
        </InputSelect>
    </div>
    <br />
        <div class="form-group">
            <label>Book Cover image:</label>
            <div>
                <InputFile OnChange="FileSelectionHandle" />
                <img src="@img" width="100" heigth="100" class="img-thumbnail">
                <p class="text-danger">@uploadFileWarning</p>
            </div>
        </div>
    <br />
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Update Book
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary" type="button">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>
</EditForm>
</div>
@code {
    [Parameter]
    public int id { get; set; }
    private BookUpdateDto Book = new BookUpdateDto();
    private List<AuthorReadOnlyDto> authors = new();
    private string uploadFileWarning = String.Empty;
    private string img = String.Empty;
    private long maxFileSize = 1024 * 1024 * 5;



    protected override async Task OnInitializedAsync()
    {
        var bookResponse = await bookService.GetForUpdate(id);

        if (bookResponse.Success)
        {
            Book = bookResponse.Data;
            img = Book.Image;
        }

        var authorResponse = await authorService.GetAuthors();
        if (authorResponse.Success)
        {
            authors = authorResponse.Data;
        }
    }

    private async Task UpdateBookHandle()
    {

        var bookResponse = await bookService.Update(id, Book);
        if (bookResponse.Success)
        {
            BackToList();
        }
    }

    private async Task FileSelectionHandle(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var ext = System.IO.Path.GetExtension(file.Name);
            if (file.Size > maxFileSize)
            {
                uploadFileWarning = "This file is too big for upload.";
                return;
            }

            if (!(ext.ToLower().Contains("jpg") || ext.ToLower().Contains("png") || ext.ToLower().Contains("jpeg")))
            {
                uploadFileWarning = "Please select valid a image file (*.jpg |*.png|*.jpeg)";
                return;
            }
                var byteArray = new byte[file.Size];
                using var fs = file.OpenReadStream();
                await fs.ReadAsync(byteArray);
                string imageType = file.ContentType;
                string base64String = Convert.ToBase64String(byteArray);

                Book.ImageData = base64String;
                Book.OriginalImageName = file.Name;
                img = $"data:{imageType}; base64,{base64String}";
           
               
            }
    }

    private void BackToList()
    {
        navManager.NavigateTo("/books/");
    }

}
